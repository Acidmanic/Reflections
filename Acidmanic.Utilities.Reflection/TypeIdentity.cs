using System;
using System.Collections.Generic;
using System.Linq;
using Acidmanic.Utilities.Reflection.ObjectTree;

namespace Acidmanic.Utilities.Reflection
{
    public static class TypeIdentity
    {

        private static readonly string[] IdNames = {"Id", "ID", "id", "iD"};


        public static AccessNode FindIdentityLeaf<TModel,TLeaf>()
        {
            return FindIdentityLeaf(typeof(TModel), typeof(TLeaf));
        }

        public static AccessNode FindIdentityLeaf<TModel>()
        {
            return FindIdentityLeaf(typeof(TModel));
        }
        
        public static AccessNode FindIdentityLeaf(Type modelType,Type leafType)
        {
            return ReturnFirstNotNullResult<AccessNode>(
                () => GetAutoGeneratedLeaves(modelType,leafType).FirstOrDefault(),
                () => GetUniqueLeaves(modelType,leafType).FirstOrDefault( l => IdNames.Contains(l.Name)),
                () => GetUniqueLeaves(modelType,leafType).FirstOrDefault(),
                () => GetLeavesByName(modelType,leafType,IdNames).FirstOrDefault(),
                () => FindIdentityLeaf(modelType)
            );
        }

        public static AccessNode FindIdentityLeaf(Type modelType)
        {
            return ReturnFirstNotNullResult<AccessNode>(
                () => GetAutoGeneratedLeaves(modelType).FirstOrDefault(),
                () => GetUniqueLeaves(modelType).FirstOrDefault( l => IdNames.Contains(l.Name)),
                () => GetUniqueLeaves(modelType).FirstOrDefault(),
                () => GetLeavesByName(modelType,IdNames).FirstOrDefault()
                );
        }
        
        private static T ReturnFirstNotNullResult<T>(params Func<T>[] codes)
        {
            foreach (var code in codes)
            {
                var result = code();

                if (result != null)
                {
                    return result;
                }
            }

            return default;
        }
        
        public static IEnumerable<AccessNode> GetLeavesByName<TModel, TLeaf>(params string[] acceptableNames)
        {
            return GetLeavesByName(typeof(TModel), typeof(TLeaf), acceptableNames);
        }

        public static IEnumerable<AccessNode> GetLeavesByName<TModel>(params string[] acceptableNames)
        {
            return GetLeavesByName(typeof(TModel), acceptableNames);
        }

        public static IEnumerable<AccessNode> GetLeavesByName(Type modelType, Type leafType,
            params string[] acceptableNames)
        {
            return GetDirectLeaves(modelType, l => acceptableNames.Contains(l.Name) && l.Type == leafType);
        }

        public static IEnumerable<AccessNode> GetLeavesByName(Type modelType, params string[] acceptableNames)
        {
            return GetDirectLeaves(modelType, l => acceptableNames.Contains(l.Name));
        }

        public static IEnumerable<AccessNode> GetAutoGeneratedLeaves<TModel, TLeaf>()
        {
            return GetAutoGeneratedLeaves(typeof(TModel), typeof(TLeaf));
        }

        public static IEnumerable<AccessNode> GetAutoGeneratedLeaves<TModel>()
        {
            return GetAutoGeneratedLeaves(typeof(TModel));
        }

        public static IEnumerable<AccessNode> GetAutoGeneratedLeaves(Type modelType, Type leafType)
        {
            return GetDirectLeaves(modelType, l => l.IsAutoValued && l.Type == leafType);
        }

        public static IEnumerable<AccessNode> GetAutoGeneratedLeaves(Type modelType)
        {
            return GetDirectLeaves(modelType, l => l.IsAutoValued);
        }

        public static IEnumerable<AccessNode> GetUniqueLeaves<TModel, TLeaf>()
        {
            return GetUniqueLeaves(typeof(TModel), typeof(TLeaf));
        }

        public static IEnumerable<AccessNode> GetUniqueLeaves<TModel>()
        {
            return GetUniqueLeaves(typeof(TModel));
        }

        public static IEnumerable<AccessNode> GetUniqueLeaves(Type modelType)
        {
            return GetDirectLeaves(modelType, l => l.IsAutoValued);
        }

        public static IEnumerable<AccessNode> GetUniqueLeaves(Type modelType, Type leafType)
        {
            return GetDirectLeaves(modelType, l => l.IsAutoValued && l.Type == leafType);
        }

        private static IEnumerable<AccessNode> GetDirectLeaves(Type type, Func<AccessNode, bool> selector)
        {
            var accessNode = ObjectStructure.CreateStructure(type, false);

            var leaves = accessNode
                .GetChildren()
                .Where(c => c.IsLeaf)
                .Where(selector);

            return leaves;
        }
    }
}